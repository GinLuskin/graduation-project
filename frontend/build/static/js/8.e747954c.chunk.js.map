{"version":3,"sources":["places/pages/NewPlace.js"],"names":["i","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","event","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","push","Fragment","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled"],"mappings":"sQACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAuGeC,UArFE,WACf,IAAMC,EAAOC,qBAAWC,KACxB,EAAqDC,cAA7CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WACvC,EAAkCC,YAChC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,QAAS,CACPH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,MAAO,KACPC,SAAS,KAEb,mBAlBKI,EAAS,KAAEC,EAAY,KAoBxBC,EAAUC,cAEVC,EAAkB,uCAAG,WAAMC,GAAK,uEAQqB,OAPzDA,EAAMC,iBAAiB,UAEfC,EAAW,IAAIC,UACZC,OAAO,QAAST,EAAUU,OAAOhB,MAAMC,OAChDY,EAASE,OAAO,cAAeT,EAAUU,OAAOb,YAAYF,OAC5DY,EAASE,OAAO,UAAWT,EAAUU,OAAOZ,QAAQH,OACpDY,EAASE,OAAO,UAAWxB,EAAK0B,QAChCJ,EAASE,OAAO,QAAST,EAAUU,OAAOX,MAAMJ,OAAO,UAEjDJ,EAAYqB,mCAA+C,OAAQL,EAAU,CACjFM,cAAe,UAAY5B,EAAK6B,QAC/B,KAAD,GACFZ,EAAQa,KAAK,KAAK,4GAErB,gBAfuB,sCAiBxB,OACE,kBAAC,IAAMC,SAAQ,KACb,kBAAC,IAAU,CAAC1B,MAAOA,EAAO2B,QAASzB,IACnC,0BAAM0B,UAAU,aAAaC,SAAUf,GACpCf,GAAa,kBAAC,IAAc,CAAC+B,WAAS,IACvC,kBAAC,IAAK,CACJC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS3B,IAEX,kBAAC,IAAK,CACJoB,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACI,YAAoB,IACjCF,UAAU,4DACVC,QAAS3B,IAEX,kBAAC,IAAK,CACJoB,GAAG,UACHC,QAAQ,QACRE,MAAM,UACNC,WAAY,CAACC,eACbC,UAAU,gCACVC,QAAS3B,IAEX,kBAAC,IAAW,CACVoB,GAAG,QACHO,QAAS3B,EACT0B,UAAU,6BAEZ,kBAAC,IAAM,CAACJ,KAAK,SAASO,UAAW9B,EAAUJ,SAAQ","file":"static/js/8.e747954c.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook'\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './PlaceForm.css';\n\n\n\nconst NewPlace = () => {\n  const auth = useContext(AuthContext)\n  const { isLoading, error, sendRequest, clearError} = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      },\n      address: {\n        value: '',\n        isValid: false\n      },\n      image: {\n        value: null,\n        isValid: false\n      }\n  });\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async event => {\n    event.preventDefault();\n    try{\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value); \n      \n      await sendRequest(process.env.REACT_APP_BACKEND_URL + '/places', 'POST', formData, {\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.push('/');\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay/>}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (at least 5 characters).\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address.\"\n          onInput={inputHandler}\n        />\n        <ImageUpload \n          id=\"image\" \n          onInput={inputHandler} \n          errorText=\"Please provide an image.\" \n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;"],"sourceRoot":""}