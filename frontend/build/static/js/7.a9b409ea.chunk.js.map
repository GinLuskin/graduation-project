{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","console","log","inputs","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,+NCNb,06MAgKeC,UA/IF,WACX,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAAK,mBAA7CC,EAAW,KAAEC,EAAc,KAClC,EAAqDC,cAA7CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAEvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPC,SAAS,KAGb,GACD,mBAZME,EAAS,KAAEC,EAAY,KAAEC,EAAW,KA2CrCC,EAAiB,uCAAG,WAAMC,GAAK,2EAGL,GAF9BA,EAAMC,iBAENC,QAAQC,IAAIP,EAAUQ,SAElBpB,EAAY,CAAD,yCAEgBK,EACzBgB,wCACA,OACAC,KAAKC,UAAU,CACbf,MAAOI,EAAUQ,OAAOZ,MAAMC,MAC9BE,SAAUC,EAAUQ,OAAOT,SAASF,QAEtC,CACE,eAAgB,qBAElB,KAAD,EAVKe,EAAY,OAWlB5B,EAAK6B,MAAMD,EAAaE,OAAQF,EAAaG,OAAO,kFAQG,OARH,WAI9CC,EAAW,IAAIC,UACZC,OAAO,QAASlB,EAAUQ,OAAOZ,MAAMC,OAChDmB,EAASE,OAAO,OAAQlB,EAAUQ,OAAOW,KAAKtB,OAC9CmB,EAASE,OAAO,WAAYlB,EAAUQ,OAAOT,SAASF,OACtDmB,EAASE,OAAO,QAASlB,EAAUQ,OAAOY,MAAMvB,OAAO,UAC5BJ,EACzBgB,yCACA,OACAO,GACA,KAAD,GAJKJ,EAAY,OAMlB5B,EAAK6B,MAAMD,EAAaE,OAAQF,EAAaG,OAAO,qHAGzD,gBApCsB,sCAsCvB,OACE,kBAAC,IAAMM,SAAQ,KACb,kBAAC,IAAU,CAAC7B,MAAOA,EAAO8B,QAAS5B,IACnC,kBAAC,IAAI,CAACd,UAAU,kBACbW,GAAa,kBAAC,IAAc,CAACgC,WAAS,IACvC,8CACA,6BACA,0BAAMC,SAAUrB,IACZf,GACA,kBAAC,IAAK,CACJqC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,uBACVC,QAAS/B,KAGXb,GACA,kBAAC,IAAW,CACV6C,QAAM,EACNP,GAAG,QACHM,QAAS/B,EACT8B,UAAU,6BAGd,kBAAC,IAAK,CACJN,QAAQ,QACRC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACK,eACbH,UAAU,sCACVC,QAAS/B,IAEX,kBAAC,IAAK,CACJwB,QAAQ,QACRC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS/B,IAEX,kBAAC,IAAM,CAAC0B,KAAK,SAASS,UAAWpC,EAAUF,SACxCV,EAAc,QAAU,WAG7B,kBAAC,IAAM,CAACiD,SAAO,EAACC,QApHI,WACnBlD,EAUHc,EAAY,2BAELF,EAAUQ,QAAM,IACnBW,KAAM,CACJtB,MAAO,GACPC,SAAS,GAEXsB,MAAO,CACLvB,MAAO,KACPC,SAAS,MAGb,GArBFI,EAAY,2BAELF,EAAUQ,QAAM,IACnBW,UAAMoB,EACNnB,WAAQmB,IAEVvC,EAAUQ,OAAOZ,MAAME,SAAWE,EAAUQ,OAAOT,SAASD,SAkBhET,GAAe,SAAAmD,GAAQ,OAAKA,OA0FmB,aAC9BpD,EAAc,SAAW","file":"static/js/7.a9b409ea.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError} = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image:  undefined\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false\n          },\n          image: {\n            value: null,\n            isValid: false\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n\n    console.log(formState.inputs);\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/login',\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          {\n            'Content-Type': 'application/json'\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData(); \n        formData.append('email', formState.inputs.email.value);\n        formData.append('name', formState.inputs.name.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + '/users/signup',\n          'POST',\n          formData\n        );\n\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload \n              center \n              id=\"image\" \n              onInput={inputHandler} \n              errorText=\"Please provide an image.\"\n              />\n            )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}